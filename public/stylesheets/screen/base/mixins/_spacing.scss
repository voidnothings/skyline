/**

  @spacing mixin
--------------------------------------------------------
  base/mixins/_spacing.css
-----------------------------------------------------------

  Mixin for consistent spacing.  It accepts integers, which
  create multiples of the $spacing unit, 'a' or 'auto' which
  creates a value of 'auto', or 'n' which does not create anything
  and is just ignored.

  Usage: include padding of 1 spacing unit at top, 2 at bottom
  .example-module {
    @include padding(1 n 2 n);
  }

-----------------------------------------------------  */

// Define the $spacing variables which are based on the global $unit var
$spacing: 1*$unit;
$spacing__sm: 2*$unit;
$spacing__md: 2*$unit;
$spacing__lg: 3*$unit;
$spacing__xl: 4*$unit;
$spacing__xxl: 5*$unit;



// Space mixin
@mixin space($attribute, $value) {
  #{$attribute}: $spacing * $value;
  @include bp-at-least($breakpoint__sm) {
    #{$attribute}: $spacing__sm * $value;
  }
  @include bp-at-least($breakpoint__md) {
    #{$attribute}: $spacing__md * $value;
  }
  @include bp-at-least($breakpoint__lg) {
    #{$attribute}: $spacing__lg * $value;
  }
  @include bp-at-least($breakpoint__xl) {
    #{$attribute}: $spacing__xl * $value;
  }
  @include bp-at-least($breakpoint__xxl) {
    #{$attribute}: $spacing__xxl * $value;
  }
}



// Padding mixin
//
@mixin padding ($values: n n n n) {

  $top: nth($values, 1);
  $right: nth($values, 2);
  $bottom: nth($values, 3);
  $left: nth($values, 4);

  @if $top != n {
    @if $top == auto {
      padding-top: auto;
    }
    @else {
      @include space(padding-top, $top)
    }
  }
  @if $right != n {
    @if $right == auto {
      padding-right: auto;
    }
    @else {
      @include space(padding-right, $right)
    }
  }
  @if $bottom != n {
    @if $bottom == auto {
      padding-bottom: auto;
    }
    @else {
      @include space(padding-bottom, $bottom)
    }
  }
  @if $left != n {
    @if $left == auto {
      padding-left: auto;
    }
    @else {
      @include space(padding-left, $left)
    }
  }
}



// Padding margin
@mixin margin ($values: n n n n) {

  $top: nth($values, 1);
  $right: nth($values, 2);
  $bottom: nth($values, 3);
  $left: nth($values, 4);

  @if $top != n {
    @if $top == auto {
      margin-top: auto;
    }
    @else {
      @include space(margin-top, $top)
    }
  }
  @if $right != n {
    @if $right == auto {
      margin-right: auto;
    }
    @else {
      @include space(margin-right, $right)
    }
  }
  @if $bottom != n {
    @if $bottom == auto {
      margin-bottom: auto;
    }
    @else {
      @include space(margin-bottom, $bottom)
    }
  }
  @if $left != n {
    @if $left == auto {
      margin-left: auto;
    }
    @else {
      @include space(margin-left, $left)
    }
  }
}